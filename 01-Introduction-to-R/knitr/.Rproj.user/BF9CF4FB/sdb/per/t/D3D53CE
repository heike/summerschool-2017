{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Objects and Data structures in R\"\nsubtitle: \"Midwest Big Data Summer School\"\nauthor: \"Heike Hofmann (hofmann@iastate.edu, @heike_hh), Eric Hare\"\ndate: \"`r Sys.Date()`\"\noutput:\n  ioslides_presentation:\n    transition: default\n    widescreen: true\ncss:\n  styles.css\n---\n\n\n## Data Frames\n\n- Data Frames are the work horse of R objects\n- Structured by rows and columns and can be indexed\n- Each column is a specified variable type\n- Columns names can be used to index a variable\n- Advice for naming variable applys to editing columns names\n- Can be specified by grouping vectors of equal length as columns\n\n- Follow along (copy & paste the code into the console):\n```{r, eval = FALSE}\ncurl::curl_download(\n  \"https://raw.githubusercontent.com/heike/rwrks/gh-pages/summerschool/01-Introduction-to-R/code/3-r-objects.R\",\n  \"3-r-objects.R\"\n)\nfile.edit(\"3-r-objects.R\")\n```\n\n## Data Frame Indexing\n\n- Elements indexed similar to a vector using `[` `]`\n- `df[i,j]` will select the element in the $i^{th}$ row and $j^{th}$ column\n- `df[ ,j]` will select the entire $j^{th}$ column and treat it as a vector\n- `df[i ,]` will select the entire $i^{th}$ row and treat it as a vector\n- Logical vectors can be used in place of i and j used to subset the row and columns\n\n## Adding a new Variable to a Data Frame\n\n- Create a new vector that is the same length as other columns\n- Append new column to the data frame using the `$` operator\n- The new data frame column will adopt the name of the vector\n\n\nThis is what we did before in the tips data set:\n```{r, echo=FALSE}\ntips <- read.csv(\"http://heike.github.io/rwrks/summerschool/data/tips.csv\")\n```\n\n```{r}\n# create rate variable in the tips data set:\ntips$rate <- tips$tip / tips$total_bill\n```\n\n\n## Data Frame Demo\n\nUse Edgar Anderson's Iris Data:\n\n```{r}\nhead(iris)\n```\n\nSelect Species column (5th column):\n\n```{r}\niris[,5]\n```\n\n## Demo (Continued)\n\nSelect Species column with the `$` operator:\n\n```{r}\niris$Species\n```\n\n## Demo (Continued)\n\n```{r}\niris$Species == \"setosa\"\n```\n\n## Demo (Continued)\n\n```{r}\niris[iris$Species==\"setosa\", ]\n```\n\n## Creating our own Data Frame\n\nCreate our own data frame using `data.frame` function\n\n```{r}\nmydf <- data.frame(NUMS = 1:5, \n                   lets = letters[1:5],\n                   vehicle = c(\"car\", \"boat\", \"car\", \"car\", \"boat\"))\nmydf\n```\n\n##\n\n`expand.grid` allows to quickly create all combinations of levels\n```{r}\ndframe <- data.frame(expand.grid(\n  reps = 1:3, Type = c(\"Control\", \"Treatment\")))\ndframe\n```\n\n## Renaming columns\n\nThe `names` function can be used on the left hand side and the right hand side of an assignment:\n\n```{r}\nnames(dframe)\n\nnames(dframe)[1] <- \"Reps\"\ndframe\n```\n\n## Your Turn {data-background=#527a7a}\n\n1. Make a data frame with column 1: 1,2,3,4,5,6 and column 2: a,b,a,b,a,b\n2. Select only rows with value \"a\" in column 2 using a logical vector\n3. `mtcars` is a built in data set like `iris`: Extract the 4th row of the `mtcars` data.\n\n## Lists\n\n- Lists are a structured collection of R objects\n- R objects in a list need not be the same type\n- Create lists using the `list` function\n- Lists indexed using double square brackets `[[ ]]` to select an object\n\n## List Example\n\nCreating a list containing a vector and a matrix:\n\n```{r}\nmylist <- list(matrix(letters[1:10], nrow = 2, ncol = 5),\n               seq(0, 49, by = 7))\nmylist\n```\n\nUse indexing to select the second list element:\n\n```{r}\nmylist[[2]]\n```\n\n## Your Turn {data-background=#527a7a}\n\n1. Create a list containing a vector and a 2x3 data frame\n2. Use indexing to select the data frame from your list\n3. Use further indexing to select the first row from the data frame in your list\n\n## Examining Objects\n\n- `head(x)` - View top 6 rows of a data frame\n- `tail(x)` - View bottom 6 rows of a data frame\n- `summary(x)` - Summary statistics   \n- `str(x)` - View structure of object  \n- `dim(x)` - View dimensions of object \n- `length(x)` - Returns the length of a vector\n\n## Examining Objects Example\n\nWe can examine the first two values of an object by passing the `n` parameter to the `head` function:\n\n```{r}\nhead(iris, n = 2)\n```\n\nWhat's its structure?\n\n```{r}\nstr(iris)\n```\n\n## Your Turn {data-background=#527a7a}\n\n1. View the top 8 rows of mtcars data\n2. What type of object is the mtcars data set?\n3. How many rows are in the mtcars data set? (try finding this using dim or indexing + length)\n4. Summarize the values in each column of the mtcars data set\n\n## Working with Output from a Function\n\n- Can save output from a function as an object\n- Object is generally a list of output objects\n- Can pull off items from the output for further computing\n- Examine object using functions like `str(x)`\n\n## Saving Output Demo\n\n- `t-test` using iris data to see if petal lengths for setosa and versicolor are the same\n- `t.test` function can only handle two groups, so we subset out the virginica species\n\n```{r}\nt.test(Petal.Length ~ Species, data = iris[iris$Species != \"virginica\", ])\n```\n\n## Demo (Continued)\n\nSave the output of the `t-test` function to an object\n\n```{r}\ntout <- t.test(Petal.Length ~ Species, data = iris[iris$Species != \"virginica\", ])\n```\n\nLet's look at the structure of this object:\n\n```{r}\nstr(tout)\n```\n\n## Demo: Extracting the P-Value\n\nSince this is simply a list, we can use our regular indexing:\n\n```{r}\ntout$p.value\ntout[[3]]\n```\n\n## Importing Data\n\nWe often need to import in our own data rather than just using built-in datasets.\n\n- First need to tell R where the data is saved (either by specifying the path or navigating the working directory by setting `setwd()`)\n- For finding a file/path can use a file browser/search by calling `file.choose()`\n- Data read in using R functions such as:\n    - `read.table()` for reading in .txt files\n    - `read.csv()` for reading in .csv files\n- Assign the data to new R object when reading in the file\n\n```{r}\nwrite.csv(iris, \"iris.csv\", row.names=FALSE)\n```\n## Exporting Data and Objects\n\n- Similarly to importing, exporting is supported using functions:\n\n    - for data frames use `write.csv` or `write.table`\n    - for more general objects such as lists use `save` (see `?save`). Objects saved with `save` can be loaded using the function `load()`\n    - `save` writes the object in an rda format (short for R data) - this is a R specific binary format (it is small, keeps types and loads fast) \n\n```{r}\niris_rda <- iris\nsave(iris_rda, file=\"iris-data.rda\")\nrm(iris_rda) # object is gone from environment\n\nload(\"iris-data.rda\") # and now it is back!\n```\n\n\n## Your Turn {data-background=#527a7a}\n\n- Write the iris data set into a csv file on your machine. Check where it appears. For a challenge try to change the location. \n- Export the `tout` object using the function `save`. Delete `tout` from your working environment by running `rm(tout)`. \nLoad the previously saved object using `load`. If everything went alright, `tout` will be back in your working environment!\n",
    "created" : 1466516656109.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "983343059",
    "id" : "D3D53CE",
    "lastKnownWriteTime" : 1466522968,
    "last_content_update" : 1466522968665,
    "path" : "~/rwrks/summerschool/01-Introduction-to-R/knitr/3-r-objects.Rmd",
    "project_path" : "3-r-objects.Rmd",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}