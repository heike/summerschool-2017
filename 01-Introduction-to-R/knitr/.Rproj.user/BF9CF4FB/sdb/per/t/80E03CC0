{
    "collab_server" : "",
    "contents" : "---\ntitle: \"R Basics\"\nsubtitle: \"Midwest Big Data Summer School\"\nauthor: \"Heike Hofmann (hofmann@iastate.edu, @heike_hh), Eric Hare\"\ndate: \"`r Sys.Date()`\"\noutput:\n  ioslides_presentation:\n    transition: default\n    widescreen: true\ncss:\n  styles.css\n---\n\n\n```{r, echo=FALSE}\ntips <- read.csv(\"http://heike.github.io/rwrks/01-r-intro/data/tips.csv\")\ntips$rate <- tips$tip / tips$total_bill\n```\n\n## R is an Overgrown Calculator\n\n- Follow along (copy & paste the code into the console):\n```{r, eval = FALSE}\ncurl::curl_download(\n  \"https://raw.githubusercontent.com/hofmann/rwrks/gh-pages/01-Introduction-to-R/code/2-basics.R\",\n  \"2-basics.R\"\n)\nfile.edit(\"2-basics.R\")\n```\n\n## R is an Overgrown Calculator\n\n\n```{r}\n# Addition and Subtraction\n2 + 5 - 1\n\n# Multiplication\n109*23452\n\n# Division\n3/7\n```\n\n\n## More Calculator Operations\n\n```{r}\n# Integer division\n7 %/% 2\n\n# Modulo operator (Remainder)\n7 %% 2\n\n# Powers\n1.5^3\n```\n\n## Math Functions\n\n- Exponentiation \n    - `exp(x)`\n- Logarithms\n    - `log(x)`\n    - `log(x, base = 10)`\n- Trigonometric functions\n    - `sin(x)`\n    - `asin(x)`\n    - `cos(x)`\n    - `tan(x)`\n    \n## Creating Objects\n\nWe can create an object using the assignment operator `<-`:\n\n```{r}\nx <- 5\ntodays_date <- 21\n```\n\nWe can then perform any of the functions on these objects:\n\n```{r}\nlog(x)\ntodays_date^2\n```\n\n## Rules for Variable Creation\n\n- Variable names can't start with a number\n- Variables in R are case-sensitive\n- Some common letters are used internally by R and should be avoided as variable names (c, q, t, C, D, F, T, I)\n- There are reserved words that R won't let you use for variable names. (for, in, while, if, else, repeat, break, next)\n- R will let you use the name of a predefined function __without any warning__.  Try not to overwrite those though!\n\n## Vectors\n\nA variable usually consists of more than a single value. We can create a **vector** using the `c` (combine) function:\n\n```{r}\ny <- c(1, 5, 3, 2)\n```\n\nOperations will then be done element-wise:\n\n```{r}\ny / 2\n```\n\n## Getting Help\n\nWe will talk MUCH more about vectors in a bit, but for now, let's talk about a couple ways to get help. The primary function to use is the `help` function. Just pass in the name of the function you need help with:\n\n```{r, eval=FALSE}\nhelp(head)\n```\n\nThe `?` function also works:\n\n```{r, eval=FALSE}\n?head\n```\n\nGoogling for help is a bit hard. Searches of the form  R + CRAN + <your query> usually get good results\n\n## R Reference Card\n\nWe will pass you out a copy, but you can download the reference card from:\n\nhttp://cran.r-project.org/doc/contrib/Short-refcard.pdf\n\nHaving this open or printed off and near you while working is helpful.\n\n## Your Turn {data-background=#527a7a}\n\nUsing the R Reference Card (and the Help pages, if needed), do the following:\n\n1. Find out how many rows and columns the `iris' data set has.  Figure out at least 2 ways to do this.\n*Hint: \"Variable Information\" section on the first page of the reference card!*\n\n2. Use the `rep` function to construct the following vector:  1 1 2 2 3 3 4 4 5 5\n*Hint: \"Data Creation\" section of the reference card*\n\n3. Use `rep` to construct this vector: 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5\n\n## Data Frames Introduction\n\n- `tips` is a data frame.\n- Data frames hold data sets\n- Columns can have different types - like an Excel spreadsheet\n- Each column in a data frame is a vector - so each column needs to have values that are all the same type.\n- We can access different columns using the `$` operator.\n\n```{r}\ntip <- tips$tip\nbill <- tips$total_bill\n```\n\n## More about Vectors\n\nA vector is a list of values that are all the same type. We have seen that we can create them using the `c` or the `rep` function. We can also use the `:` operator if we wish to create consecutive values:\n\n```{r}\na <- 10:15\na\n```\n\nWe can extract the different elements of the vector like so:\n\n```{r}\nbill[3]\n```\n\n## Indexing Vectors\n\nWe have seen that we can access individual elements of the vector. But **indexing** is a lot more powerful than that:\n\n```{r}\nhead(tip)\n\ntip[c(1, 3, 5)]\ntip[1:5]\n```\n\n## Logical Values\n\n- R has built in support for logical values\n- TRUE and FALSE are built in.  T (for TRUE) and F (for FALSE) are supported but can be modified\n- Logicals can result from a comparison using\n    - $<$\n    - $>$\n    - $<=$\n    - $>=$\n    - $==$\n    - $!=$\n    \n## Indexing with Logicals\n\nWe can index vectors using logical values as well:\n\n```{r}\nx <- c(2, 3, 5, 7)\nx[c(TRUE, FALSE, FALSE, TRUE)]\nx > 3.5\nx[x > 3.5]\n```\n\n## Logical Examples\n\n```{r}\nrate <- tips$rate\nhead(rate)\nsad_tip <- rate < 0.10\nrate[sad_tip]\n```\n\n## Your Turn {data-background=#527a7a}\n\n1. Find out how many people tipped over 20%.\n\n*Hint: if you use the `sum` function on a logical vector, it'll return how many TRUEs are in the vector:*\n```{r}\nsum(c(TRUE, TRUE, FALSE, TRUE, FALSE))\n```\n2. **More Challenging**: Calculate the sum of the total bills of anyone who tipped over 20%\n\n## Modifying Vectors\n\nWe can modify vectors using indexing as well:\n\n```{r}\nx <- bill[1:5]\nx\nx[1] <- 20\nx\n```\n\n## Vector Elements\n\nElements of a vector must all be the same type:\n\n```{r}\nhead(rate)\nrate[sad_tip] <- \":-(\"\nhead(rate)\n```\n\nBy changing a value to a string, all the other values got changed as well.\n\n## Data Types in R\n\n- Can use `mode` or `class` to find out information about variables\n- `str` is useful to find information about the structure of your data\n- Many data types: numeric, integer, character, Date, and factor most common\n    \n```{r}\nstr(tips)\n```\n\n## Converting Between Types\n\nWe can convert between different types using the `as` series of functions:\n\n```{r}\nsize <- head(tips$size)\nsize\nas.character(size)\nas.numeric(\"2\")\n```\n\n## Some useful functions\n\nThere are a whole variety of useful functions to operate on vectors. A couple of the more common ones are `length`, which returns the length (number of elements) of a vector, and `sum`, which adds up all the elements of a vector.\n\n```{r}\nx <- tip[1:5]\nlength(x)\nsum(x)\n```\n\n## Statistical Functions\n\nUsing the basic functions we've learned it wouldn't be hard to compute some basic statistics.\n\n```{r}\n(n <- length(tip))\n(meantip <- sum(tip) / n)\n(standdev <- sqrt(sum((tip - meantip)^2) / (n - 1)))\n```\n\nBut we don't have to.\n\n## Built-in Statistical Functions\n\n```{r}\nmean(tip)\nsd(tip)\nsummary(tip)\nquantile(tip, c(.025, .975))\n```\n\n## Element-wise Logical Operators\n\n- `&` (elementwise AND)\n- `|` (elementwise OR)\n\n```{r}\nc(T, T, F, F) & c(T, F, T, F)\nc(T, T, F, F) | c(T, F, T, F)\n# Which are big bills with a poor tip rate?\nid <- (bill > 40 & rate < .10)\ntips[id,]\n```\n\n## Your Turn {data-background=#527a7a}\n\n1. Read up on the dataset (`?diamonds`)\n2. Plot price by carat (use qplot - go back to the motivating example for help with the syntax)\n3. Create a variable `ppc` for price/carat. Store this variable as a column in the diamonds data\n4. Make a histogram of all ppc values that exceed $10000 per carat.\n5. Explore any other interesting relationships you find\n",
    "created" : 1466522931452.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2916839931",
    "id" : "80E03CC0",
    "lastKnownWriteTime" : 1466522976,
    "last_content_update" : 1466522976983,
    "path" : "~/rwrks/summerschool/01-Introduction-to-R/knitr/2-basics.Rmd",
    "project_path" : "2-basics.Rmd",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}