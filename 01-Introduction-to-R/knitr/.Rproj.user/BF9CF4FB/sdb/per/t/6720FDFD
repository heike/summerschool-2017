{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Your Turn Solutions\"\nauthor: \"Heike Hofmann, Eric Hare\"\ndate: \"June 21, 2016\"\noutput: html_document\n---\n\n## Motivating Example\n\nTry playing with chunks of code from this session to further investigate the tips data:\n\n1. Get a summary of the total bill values\n\n```{r}\ntips <- read.csv(\"http://heike.github.io/rwrks/01-r-intro/data/tips.csv\")\n\nsummary(tips$total_bill)\n```\n\n2. Find the average tip value for smokers\n\n```{r}\ntips$rate <- tips$tip / tips$total_bill\nmean(tips$rate[tips$smoker==\"Yes\"])\n```\n\n3. Get scatterplots of tip versus total bill for different days of the week\n\n```{r}\nlibrary(ggplot2)\n\nqplot(total_bill, tip, geom = \"point\", data = tips, facets=~day)\n```\n\n## R Basics\n\nUsing the R Reference Card (and the Help pages, if needed), do the following:\n\n1. Find out how many rows and columns the `iris' data set has.  Figure out at least 2 ways to do this.\n*Hint: \"Variable Information\" section on the first page of the reference card!*\n\n```{r}\nnrow(iris)\nncol(iris)\ndim(iris)\n```\n\n2. Use the `rep` function to construct the following vector:  1 1 2 2 3 3 4 4 5 5\n*Hint: \"Data Creation\" section of the reference card*\n\n```{r}\nrep(1:5, each = 2)\n```\n\n3. Use `rep` to construct this vector: 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5\n\n```{r}\nrep(1:5, times = 3)\n```\n\n1. Find out how many people tipped over 20%.\n*Hint: if you use the `sum` function on a logical vector, it'll return how many TRUEs are in the vector:*\n```{r}\nsum(c(TRUE, TRUE, FALSE, TRUE, FALSE))\n```\n\n```{r}\nsum(tips$rate > .2)\n```\n\n2. **More Challenging**: Calculate the sum of the total bills of anyone who tipped over 20%\n\n```{r}\nsum(tips$total_bill[tips$rate > .2])\n```\n\n1. Read up on the dataset (`?diamonds`)\n2. Plot price by carat (use qplot - go back to the motivating example for help with the syntax)\n\n```{r}\nqplot(carat, price, data = diamonds)\n```\n\n3. Create a variable `ppc` for price/carat. Store this variable as a column in the diamonds data\n\n```{r}\ndiamonds$ppc <- diamonds$price / diamonds$carat\n```\n\n4. Make a histogram of all ppc values that exceed $10000 per carat.\n\n```{r}\nqplot(ppc, geom = \"histogram\", data = diamonds[diamonds$ppc > 10000,])\n```\n\n5. Explore any other interesting relationships you find\n\n## Data Structures\n\n1. Make a data frame with column 1: 1,2,3,4,5,6 and column 2: a,b,a,b,a,b\n\n```{r}\nmydf <- data.frame(col1 = 1:6, col2 = rep(c(\"a\", \"b\"), times = 3))\n```\n\n2. Select only rows with value \"a\" in column 2 using logical vector\n\n```{r}\nmydf[mydf$col2 == \"a\",]\n```\n\n3. `mtcars` is a built in data set like `iris`: Extract the 4th row of the `mtcars` data.\n\n```{r}\nmtcars[4,]\n```\n\n1. Create a list containing a vector and a 2x3 data frame\n\n```{r}\nmylist <- list(vec = 1:6, df = data.frame(x = 1:2, y = 3:4, z = 5:6))\n```\n\n2. Use indexing to select the data frame from your list\n\n```{r}\nmylist[[2]]\n```\n\n3. Use further indexing to select the first row from the data frame in your list\n\n```{r}\nmylist[[2]][1,]\n```\n\n1. View the top 8 rows of mtcars data\n\n```{r}\nhead(mtcars, n = 8)\n```\n\n2. What type of object is the mtcars data set?\n\n```{r}\nstr(mtcars)\n```\n\n3. How many rows are in the mtcars data set? (try finding this using dim or indexing + length)\n\n```{r}\ndim(mtcars)\n```\n\n4. Summarize the values in each column in the mtcars data set\n\n```{r}\nsummary(mtcars)\n```\n\n## Packages and Programming\n\n1. Create a function that takes numeric input and provides the mean and a 95% confidence interval for the mean for the data (the t.test function could be useful)\n\n```{r}\nmean_and_ci <- function(x) {\n    themean <- mean(x)\n    theci <- t.test(x)$conf.int\n    \n    return(list(mean = themean, ci = theci))\n}\n```\n\n2. Add checks to your function to make sure the data is either numeric or logical.  If it is logical convert it to numeric.\n\n```{r}\nmean_and_ci <- function(x) {\n    if (!is.numeric(x) && !is.logical(x)) stop(\"Need logical or numeric data\")\n    \n    x <- as.numeric(x)\n    \n    themean <- mean(x)\n    theci <- t.test(x)$conf.int\n    \n    return(list(mean = themean, ci = theci))\n}\n```\n\n3. Loop over the columns of the diamonds data set and apply your function to all of the numeric columns.\n\n```{r}\nfor (i in 1:ncol(diamonds)) {\n    if (is.numeric(diamonds[,i])) print(mean_and_ci(diamonds[,i]))\n}\n```\n\n## RMarkdown Basics\n\nStudy the second page of the [R Markdown Reference Guide](rmarkdown-reference.pdf) and go back to the [Hello R Markdown example](hello_rmarkdown.Rmd)\n\n**Easy**: Modify the figure sizing and alignment.\n\n```{r, fig.width=5, fig.height=3, fig.align='center'}\nplot(cars)\n```\n\n**Medium**: Add a figure caption.\n\n```{r, fig.cap='This is a caption'}\nplot(cars)\n```\n\n**Hard**: Can you create an animation? (Hint: look at the `fig.show` chunk option -- you might need to install the **animation** package for this)\n\n",
    "created" : 1466521173452.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "756422261",
    "id" : "6720FDFD",
    "lastKnownWriteTime" : 1466522983,
    "last_content_update" : 1466522983141,
    "path" : "~/rwrks/summerschool/01-Introduction-to-R/knitr/99-YourTurnSolutions.Rmd",
    "project_path" : "99-YourTurnSolutions.Rmd",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}